    # Define upstream servers
    upstream auth_service {
        server auth-service:5000;
    }

    upstream restaurant_service {
        server restaurant-service:5001;
    }

    upstream client_service {
        server client-service:5002;
    }

    upstream delivery_service {
        server delivery-service:5003;
    }

    server {
        listen 4000;
        server_name api-gateway localhost;

        # Add common headers
        add_header X-Request-ID $request_id;
        
        # Global CORS settings
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent' always;
        
        # Handle OPTIONS method for CORS preflight
        location ~ ^/ {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent';
                add_header 'Access-Control-Max-Age' 1728000;
                return 204;
            }
            
            # Pass to the appropriate location block
            try_files $uri @route;
        }

        location @route {
            return 404;
        }
        # Auth service routes
        location /api/auth/ {
            proxy_pass http://auth_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Restaurant service routes
        location /api/restaurants/ {
            proxy_pass http://restaurant_service/restaurants/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Client service routes
        location /api/clients/ {
            auth_request /api/auth/validate;
            proxy_pass http://client_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Delivery service routes
        location /api/delivery/ {
            auth_request /api/auth/validate;
            proxy_pass http://delivery_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 '{"status": "UP"}';
            add_header Content-Type application/json;
        }

        # Error handling
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    } 